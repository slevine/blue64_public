<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://stevenlevine.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://stevenlevine.dev/" rel="alternate" type="text/html" /><updated>2021-06-29T22:59:52+00:00</updated><id>https://stevenlevine.dev/feed.xml</id><title type="html">Steven Levine</title><subtitle>Working at Google Cloud, Hacker, Programmer, Cycling Geek, Scala Enthusiast,  who is fascinated with all things Data, Cloud, and Internet Scale.</subtitle><entry><title type="html">First Impressions of the M1 MacBook Pro</title><link href="https://stevenlevine.dev/2020/12/first-impressions-of-the-new-mac-m1-macbook/" rel="alternate" type="text/html" title="First Impressions of the M1 MacBook Pro" /><published>2020-12-28T16:15:00+00:00</published><updated>2020-12-28T16:15:00+00:00</updated><id>https://stevenlevine.dev/2020/12/first-impressions-of-the-new-mac-m1-macbook</id><content type="html" xml:base="https://stevenlevine.dev/2020/12/first-impressions-of-the-new-mac-m1-macbook/">&lt;blockquote&gt;
  &lt;p&gt;TLDR - I &lt;strong&gt;really&lt;/strong&gt; like this machine, it is portable, fast, quiet, and comfortable to work on for hours at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I read about Apple’s announcement of the new M1 MacBook Pro featuring the &lt;a href=&quot;https://www.apple.com/mac/m1/&quot;&gt;Apple M1 Chip&lt;/a&gt;, I must admit, it made me a bit excited about Macs again for the first time in a long time.  15 years to be exact, as the last time I felt this way was when Apple &lt;a href=&quot;https://en.wikipedia.org/wiki/Mac_transition_to_Intel_processors&quot;&gt;announced&lt;/a&gt; the transition from PPC to Intel at WWDC back in 2005.  Although I was excited about the potential performance gains, I was also a bit skeptical about how “real” they were given the fact that the only metric Apple provided was “2x’s faster”, and the graph they shared on their site doesn’t have any numbers along the axis.&lt;/p&gt;

&lt;p&gt;My skepticism didn’t last long, as a few days later, Geekbench performance numbers started to surface for the new machines, and they were quite impressive.  After reviewing a bunch of them as well as reading a few early reviews of them, I decided to &lt;a href=&quot;https://en.wikipedia.org/wiki/Red_pill_and_blue_pill&quot;&gt;take the red pill&lt;/a&gt; and place my order for a new M1 MacBook.  Unfortunately for me, by this time, shipping times had been pushed out to 3-4 weeks.&lt;/p&gt;

&lt;p&gt;After three weeks of waiting I had the pleasure of unboxing my new M1 MacBook Pro! The first thing I did was to try out the apps I use the most to see if they felt any faster, and let me answer that question right away with a big &lt;em&gt;YES!&lt;/em&gt;  Lucky for me most of them have early release native versions already so there was no need to install Rosetta (yet)!  For the curious few, the shortlist of apps that I initially tried were Intellij CE, VS Code, Java &amp;amp; the JVM, Scala, and most of my zsh environment.  If you are looking for more details, don’t worry, I will share my detailed impressions as well as the process I went through to get everything up and running next.&lt;/p&gt;

&lt;h3 id=&quot;initial-impression&quot;&gt;Initial Impression&lt;/h3&gt;

&lt;p&gt;My initial impression of the machine is &lt;em&gt;very positive&lt;/em&gt; for many reasons.  Here is a list of them in no particular order.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazing performance compared to my 2017 i7 based MacBook Pro, to be specific, here are the Geekbench numbers for my 2017 MacBook:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/geekbench-i7-mbp.png&quot; alt=&quot;geekbench-i7-mbp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;compared to the new M1 MacBook Pro:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/geekbench-m1-mbp.png&quot; alt=&quot;geekbench-m1-mbp&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Apps open &lt;strong&gt;instantaneously&lt;/strong&gt;.  This is not an exaggeration as an app like Firefox opens just about as fast as opening Contacts.  Even Intellij opens nearly instantaneously.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;instant on&lt;/strong&gt; feature is quite nice as well.  As soon as you open the lid, it is waiting for your fingerprint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Runs &lt;strong&gt;silently&lt;/strong&gt;.  I have been a proponent of quiet PC’s for a long time. For the first time, I can say that I have an extremely powerful machine that doesn’t sound like it is about to take off every time I perform an intensive CPU operation, I.e., building a Scala/Java project from scratch, compiling a Brew Formula, using Google Meet, performing a system update, among others.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stays &lt;strong&gt;cool&lt;/strong&gt; under pressure.  It also stays cool to the touch under the same conditions mentioned above. So cool, in fact, I no longer need to carry around a large textbook to protect myself from my burning hot machine while sitting in my favorite chair.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has &lt;strong&gt;all day&lt;/strong&gt; battery life.  Thus far, the charging pattern for it has been similar to my iPhone where I use it all day, and plug it in while I sleep. I can work on it all day, doing the sort of tasks that I mentioned above roaming around without a power cable.  At the moment this is a bit contrived, as my power adapter is never more than a few steps away since I am home all the time (due to COVID), but I am confident that once things are back to normal, I will no longer be carrying a charger with me everywhere I go.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The keyboard feels great.  I know it is strange to be talking about a keyboard given the fact that this post is about an expensive Apple laptop, but let me just say that I couldn’t be happier with the fact that this MacBook does not have the Butterfly keyboard!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun fact, my 2017 MacBook is currently with Apple Support getting the keyboard replaced under the &lt;a href=&quot;https://support.apple.com/keyboard-service-program-for-mac-notebooks&quot;&gt;Keyboard Service Program for MacBook, MacBook Air, and MacBook Pro&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;getting-up-and-running&quot;&gt;Getting up and running&lt;/h3&gt;

&lt;p&gt;These Apps &amp;amp; tools run natively on Apple Silicon, I.e., no tweaking necessary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/chrome/canary/?platform=mac&quot;&gt;Chrome Canary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/all/#product-desktop-betaintel&quot;&gt;Firefox Beta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/idea/2020/12/intellij-idea-2020-3-1/&quot;&gt;Intellij&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.azul.com/downloads/zulu-community/?os=macos&amp;amp;architecture=arm-64-bit&amp;amp;package=jdk&quot;&gt;Azul Zulu JDKs&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Scala, SBT, Gradle, and Maven all work fine under Zulu OpenJDK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/insiders/#osx&quot;&gt;VS Code Insiders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were also many workarounds I had to work through to get the rest of my tools working.  While I was waiting for the new machine, I did a lot of research on the best ways to get Brew running on the M1.  Brew on ARM64 is not “officially supported” yet, but that wasn’t going to stop me from trying to get it running.  Of course, I took the advice of the Brew committers and installed it in a non-standard location, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.homebrew&lt;/code&gt; to give it a try.&lt;/p&gt;

&lt;p&gt;I was able to get most of my formulas working this way until I ran into the ones that depended on Go or Rust.  I tried going down the “compile everything” route, but there were a lot of issues getting things running.  If someone wanted to get everything running on ARM I am confident they could have, but due to time constraints, I had to give up.  This is when I decided to go down the path of running Brew under Rosetta.  There are two different ways of getting access to a shell running under Rosetta:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a copy of the iTerm App and check off “Open using Rosetta”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/iterm-rosetta.png&quot; style=&quot;width: 65%; margin: auto; display: block; padding-top: 25px; padding-bottom: 25px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new iTerm profile where the launch command is &lt;code class=&quot;highlighter-rouge&quot;&gt;arch -x86_64 zsh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/iterm-i386.png&quot; style=&quot;width: 75%; margin: auto; display: block; padding-top: 25px; padding-bottom: 25px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I chose the second option because it is lighter weight, I.e., running a single instance of iTerm vs having two different instances running at the same time.  There is one downside to this setup, as it can be a bit confusing when trying to disambiguate AN &lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt; session from an &lt;code class=&quot;highlighter-rouge&quot;&gt;i386&lt;/code&gt; one.  Luckily, there is an easy way to fix this which is to add the current &lt;code class=&quot;highlighter-rouge&quot;&gt;$(arch)&lt;/code&gt; to your shell somewhere.&lt;/p&gt;

&lt;p&gt;Since I use &lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;Powerlevel10k&lt;/a&gt;, it seemed like the perfect place to display this was next to the icon which was in my left prompt.  The way I set it up was by adding a new function called &lt;code class=&quot;highlighter-rouge&quot;&gt;prompt_arch&lt;/code&gt; to my config that simply displays the current architecture.  Here is the entire function:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;prompt_arch&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    p10k segment &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 7 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 232 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it is quite straightforward, and after adding &lt;code class=&quot;highlighter-rouge&quot;&gt;arch&lt;/code&gt; to my left prompt config next to &lt;code class=&quot;highlighter-rouge&quot;&gt;os_icon&lt;/code&gt; I get a shell that clearly shows which architecture it is currently running on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/shell-arm.png&quot; style=&quot;width: 85%; margin: auto; display: block; padding-top: 25px; padding-bottom: 25px;&quot; /&gt; 
&lt;img src=&quot;/images/shell-i386.png&quot; style=&quot;width: 85%; margin: auto; display: block; padding-top: 25px; padding-bottom: 25px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running Brew under Rosetta solved most issues, but there were still a few issues remaining.&lt;/p&gt;

&lt;p&gt;The first of which is I couldn’t install new Python versions using pyenv.  &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv install&lt;/code&gt; failed every time I ran it, no matter which Python version, no matter if I was under &lt;code class=&quot;highlighter-rouge&quot;&gt;arm64&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;i386&lt;/code&gt;.  Fortunately, I was able to find a workaround which was to ensure it was pulling in the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/lib&lt;/code&gt; by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;LDFLAGS&lt;/code&gt; to the environment before running &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt;.  The full command that worked for me was:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-L&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;xcrun &lt;span class=&quot;nt&quot;&gt;--show-sdk-path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib&quot;&lt;/span&gt; pyenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;3.8.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next issue I faced was getting the &lt;a href=&quot;https://formulae.brew.sh/cask/google-cloud-sdk&quot;&gt;google-cloud-sdk&lt;/a&gt; and &lt;a href=&quot;https://formulae.brew.sh/formula/awscli#default&quot;&gt;awscli&lt;/a&gt; installed and working with Brew.  Installing the google-cloud-sdk, I.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install google-cloud-sdk&lt;/code&gt; failed with a cryptic error message: &lt;code class=&quot;highlighter-rouge&quot;&gt;2845 illegal hardware instruction&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;awscli&lt;/code&gt; formula installed, but all &lt;code class=&quot;highlighter-rouge&quot;&gt;aws&lt;/code&gt; commands were failing with nearly the same cryptic error message: &lt;code class=&quot;highlighter-rouge&quot;&gt;2892 illegal hardware instruction&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It was puzzling that both of the top two cloud providers SDK’s crashed with a nearly identical error message.  Then, I realized both of them depended on &lt;code class=&quot;highlighter-rouge&quot;&gt;Python@3.9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I was able to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;google-cloud-sdk&lt;/code&gt; installed and working properly by running the installer manually, outside the context of Brew.  This made me realize that the issue was not with the &lt;code class=&quot;highlighter-rouge&quot;&gt;google-cloud-sdk&lt;/code&gt;, or with Python on ARM, but with the version of Python that was being invoked when installed via Brew.&lt;/p&gt;

&lt;p&gt;After a bit of digging, I was able to find a &lt;a href=&quot;https://github.com/Homebrew/homebrew-core/issues/67713&quot;&gt;similar issue on Github&lt;/a&gt; where python failed to run with the same error that I was seeing &lt;code class=&quot;highlighter-rouge&quot;&gt;illegal hardware instruction&lt;/code&gt;.  This particular issue was “AVX instructions in Big Sur bottles crash when run in Rosetta 2” and one of the commenter’s mentioned that if you install &lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt; via Brew with the form source option I.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;brew reinstall -s python3&lt;/code&gt;, the issue goes away, and sure enough it did!  I removed the manual installation of &lt;code class=&quot;highlighter-rouge&quot;&gt;google-cloud-sdk&lt;/code&gt; and then re-installed it using Brew and that worked perfectly.  I did the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;awscli&lt;/code&gt; and then tried to run &lt;code class=&quot;highlighter-rouge&quot;&gt;aws s3 ls&lt;/code&gt; and it worked too.  So it ended up being a Python issue, but not with the language or runtime itself, but the version that shipped with Brew.  I am sure by the time of this writing it will be fixed so you won’t have to go through this trouble to get them working.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;I &lt;strong&gt;really&lt;/strong&gt; like this machine, it is portable, fast, quiet, and comfortable to work on for hours at a time.  With that being said, the question is should you get one?  If you ask me, it depends on a few things.  First, are you in the market for a new MBP?  If so, are you currently working on a 13” MacBook or looking for a smaller form factor?  If you answer yes to these questions, then I would say go for it!  You will not be disappointed.  On the other hand, if you are not currently looking or looking for a larger form factor then you should definitely wait for the 15” version of the M1 (or maybe M2) MacBook Pro.&lt;/p&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="Development" /><category term="Mac" /><summary type="html">I will walk you through my thoughts on owning the new M1 MacBook Pro and what it took for me to get my development environment up and running on it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/mac-new.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/mac-new.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">BigQuery Integer Partitioning is in Beta</title><link href="https://stevenlevine.dev/2019/12/bq-integer-range-partitioning-is-now-beta/" rel="alternate" type="text/html" title="BigQuery Integer Partitioning is in Beta" /><published>2019-12-16T14:03:00+00:00</published><updated>2019-12-16T14:03:00+00:00</updated><id>https://stevenlevine.dev/2019/12/bq-integer-range-partitioning-is-now-beta</id><content type="html" xml:base="https://stevenlevine.dev/2019/12/bq-integer-range-partitioning-is-now-beta/">&lt;blockquote&gt;
  &lt;p&gt;TLDR - It is now possible to create integer partitioned tables in BigQuery.  This post will talk about what that means, how to leverage it, and finally walk through a few scenarios demonstrating the benefits of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you weren’t paying close attention to the latest GCP announcements, you may have missed the announcement of  &lt;a href=&quot;https://cloud.google.com/bigquery/docs/creating-integer-range-partitions&quot;&gt;BigQuery Integer Range Partitioning is now in Beta&lt;/a&gt;.  This is a long awaited feature for teams that wish to partition their data by a value other than a &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;.  This post will talk about what that means, how to leverage it, and finally walk through a few scenarios demonstrating the benefits of it.&lt;/p&gt;

&lt;h3 id=&quot;creating-an-integer-range-partitioned-table&quot;&gt;Creating an Integer Range Partitioned Table&lt;/h3&gt;

&lt;p&gt;For the purposes of this post, I will be using the same NYC Taxi Ride dataset that I used &lt;a href=&quot;https://stevenlevine.dev/2019/11/querying-externally-partitioned-data-with-bq/&quot;&gt;in my previous post&lt;/a&gt;. Let’s create  an integer range partitioned table based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_location_id&lt;/code&gt;.  Creating this table is no different from creating any other table except for the fact that you have to add &lt;code class=&quot;highlighter-rouge&quot;&gt;--range_partitioning&lt;/code&gt; with a partition range when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;bq mk&lt;/code&gt;.  The first parameter represents the lower end of the range, the second the high end, and the last one represents the bucketing interval.  &lt;em&gt;The example command below creates 60 buckets of 5.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;bq&lt;/code&gt; cli, you can create an Integer Range partitioned table using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ bq mk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--range_partitioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pickup_location_id,0,300,5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  nyc_taxi.2018_by_pickup_location_id  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;vendor_id: string, pickup_datetime: string, dropoff_datetime: string, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
     passenger_count: integer, trip_distance: numeric, rate_code: string, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
     store_and_fwd_flag: string, payment_type: string, fare_amount: numeric, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
     extra: numeric, mta_tax: numeric, tip_amount: numeric, tolls_amount: numeric, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
     imp_surcharge: numeric, total_amount: numeric, pickup_location_id: integer, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
     dropoff_location_id: string, trip_date: date&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running the command, you should see:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table &lt;span class=&quot;s1&quot;&gt;'nyc_taxi.2018_by_pickup_location_id'&lt;/span&gt; successfully created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s double check to make sure our table is partitioned as we expect. To do so, we can query the meta data of the table using the &lt;code class=&quot;highlighter-rouge&quot;&gt;bq&lt;/code&gt; command again:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ bq show &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prettyjson nyc_taxi.2018_by_pickup_location_id | jq .rangePartitioning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: If you don’t have &lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt; installed, you should install it RIGHT NOW, as it is the most useful tool you will ever install when working with json in bash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And we get:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pickup_location_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;300&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, our table is partitioned by &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_location_id&lt;/code&gt; bucketed by 5.&lt;/p&gt;

&lt;h3 id=&quot;loading-data-in-to-the-table&quot;&gt;Loading Data in to the Table&lt;/h3&gt;

&lt;p&gt;Loading the data in to our newly created table is very straight forward– there are no special requirements when loading data.  The data will automatically be partitioned when using load jobs, queries, as well as streaming inserts.  For simplicity, we can load data in to the table using a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt; statement:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_by_pickup_location_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;query-performance&quot;&gt;Query Performance&lt;/h3&gt;

&lt;p&gt;For the purposes of this post, let’s assume the metric we are trying to calculate is total revenue grouped by &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_location_id&lt;/code&gt;, i.e, Upper East Side South, Midtown East, Newark Airport, etc..  With that being said, If we run this query against our original date partitioned table, it is safe to assume the performance would be less than ideal due to the fact that we do not have a way to filter out locations that do not pertain to our aggregation.&lt;/p&gt;

&lt;p&gt;Here is what it looks like when I try to run the aggregation against the &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; partitioned version of the table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-date-partitioned.png&quot; alt=&quot;int-partitioning-query-table-date-partitioned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see right away that it scanned a lot more data than necessary, as we are only looking for data pertaining to &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_location_id&lt;/code&gt; 237.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-date-partitioned-execution.png&quot; alt=&quot;int-partitioning-query-table-date-partitioned-execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the execution details we can see that it did in fact have to parse the entire dataset &lt;em&gt;(112,333,368 records)&lt;/em&gt;.  Clearly this is not the most efficient way to get the aggregation, but before the introduction of Integer based partitioning it was the only way.&lt;/p&gt;

&lt;p&gt;Now, if we run the same query against a table that is partitioned on &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_location_id&lt;/code&gt; bucketed by 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-integer-partitioned.png&quot; alt=&quot;int-partitioning-query-table-integer-partitioned&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results of the query are the same, but as you can see the number of bytes scanned has dropped to only &lt;code class=&quot;highlighter-rouge&quot;&gt;317 MB&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;2.5 GB&lt;/code&gt; which is a huge improvement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-integer-partitioned-execution.png&quot; alt=&quot;int-partitioning-query-table-integer-partitioned-execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, looking at the execution details, as expected, we can see that the number of records processed has dropped to &lt;em&gt;13,891,961 records&lt;/em&gt;. This is great, but I think we can do better.&lt;/p&gt;

&lt;p&gt;As you can see, the total number of trips is &lt;em&gt;4,631,835&lt;/em&gt;, yet we scanned almost 3 times as many records. Why is this?  If we reconsider the number we used to bucket the partitions by, namely, &lt;strong&gt;5&lt;/strong&gt;, that means each bucket will have 5 different pickup locations. From the analysis, it is clear that there is a “hotspot” near id 237 that we need to fix, but how?  It is quite easy, if we recreate the table bucketed by 1 instead of 5, meaning, each id gets its own bucket that should allow BigQuery the ability to pull records for a single id.  This can easily be achieved by changing the above create table from:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--range_partitioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pickup_location_id,0,300,5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-to-&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;--range_partitioning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pickup_location_id,0,300,1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s run the query again on the new table:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-integer-partitioned-bucket-by-1.png&quot; alt=&quot;int-partitioning-query-table-integer-partitioned-bucket-by-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great, the number of bytes scanned has gone down even further to &lt;code class=&quot;highlighter-rouge&quot;&gt;106 MB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/int-partitioning-query-table-integer-partitioned-bucket-by-1-execution.png&quot; alt=&quot;int-partitioning-query-table-integer-partitioned-bucket-by-1-execution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the execution details, we can see that the number of records scanned matches the total number of trips exactly, which means that this time when performing the aggregation, we only processed records with the matching id, which is exactly what you want to do when trying to design the most efficient partitioning strategy.  Clearly when deciding on a partitioning strategy an important factor to consider, among many, is at what granularity to bucket the partition.  There is no silver bullet here, as everyone has different query requirements.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: if you compare the execution times of the queries for the examples, even though the “less efficient” query scanned the entire dataset, the actual runtime of the query is comparable &lt;strong&gt;which is remarkable&lt;/strong&gt;.  The introduction of Integer based partitioning will mostly help the budget in these situations, I.e., less bytes scanned.&lt;/p&gt;

  &lt;p&gt;This dataset was only 21GB (which is not very large.) As a result the query times seem comparable. However, if we were running these queries against huge data sets, think IOT time series data, it would be a very different result.  In that case, being able to narrow the dataset down to a &lt;code class=&quot;highlighter-rouge&quot;&gt;sensor_id&lt;/code&gt;’s worth of data vs scanning the entire dataset will make a huge difference.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="GCP" /><category term="BigQuery" /><category term="BigData" /><summary type="html">This post will talk about what integer range partitioning is, how to leverage it, and finally walk through a few scenarios demonstrating the benefits of it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/ues.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/ues.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Querying External Data with BigQuery</title><link href="https://stevenlevine.dev/2019/11/querying-externally-partitioned-data-with-bq/" rel="alternate" type="text/html" title="Querying External Data with BigQuery" /><published>2019-11-14T17:03:00+00:00</published><updated>2019-11-14T17:03:00+00:00</updated><id>https://stevenlevine.dev/2019/11/querying-externally-partitioned-data-with-bq</id><content type="html" xml:base="https://stevenlevine.dev/2019/11/querying-externally-partitioned-data-with-bq/">&lt;blockquote&gt;
  &lt;p&gt;TLDR - In this post I will walk through how to use BigQuery’s new capability of querying Hive Partitioned Parquet files in GCS.  It is a really cool feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;some-background&quot;&gt;Some Background&lt;/h3&gt;

&lt;p&gt;I have a huge interest in Data Lakes, especially when it comes to the query engines that are capable of querying cloud object stores like Spark, Presto, Hive, Drill, among others.  With that being said, when Google Cloud announced that &lt;a href=&quot;https://cloud.google.com/blog/products/data-analytics/keep-parquet-and-orc-from-the-data-graveyard-with-new-bigquery-features&quot;&gt;BigQuery has beta support for querying Parquet and ORC files in Google Cloud Storage&lt;/a&gt;, it really peaked my curiosity.  Thus, had no choice but to find a large dataset in Parquet format and try to query it with BigQuery.  Sounds easy enough, right?&lt;/p&gt;

&lt;p&gt;To get started, I needed to find a large Hive Partitioned Dataset to use.  After some quick digging and searching, I wasn’t able to find one so the only logical thing to do was to create my own.  One of my favorite features of BigQuery is the fact that it has tons of public datasets available to use for these sort of things.  Being that I spend most of my days working in NYC, I have always found the NYC Taxi Data particularly interesting, so thought why not start there?  For reference, the name of the dataset is &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/city-of-new-york/nyc-tlc-trips?filter=solution-type:dataset&amp;amp;q=taxi&amp;amp;id=e4902dee-0577-42a0-ac7c-436c04ea50b6&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bigquery-public-data:new_york_taxi_trips&lt;/code&gt;&lt;/a&gt;.  This Dataset contains taxi rides partitioned by taxi company and year.  For the purposes of this post, I will be using &lt;code class=&quot;highlighter-rouge&quot;&gt;tlc_yellow_trips_2018&lt;/code&gt; table because it is the most recent and has nearly 18GBs of raw data.&lt;/p&gt;

&lt;h3 id=&quot;creating-hive-partitioned-data-in-gcs-using-spark-and-bigquery&quot;&gt;Creating Hive Partitioned Data in GCS using Spark and BigQuery&lt;/h3&gt;

&lt;p&gt;With an interesting table in mind, the next step is to create a Hive Partitioned version of it on Google Cloud Storage in the Parquet format.  There are countless ways to handle this, again for the purposes of this post, I decided to use a simple Spark Shell script running on a Cloud DataProc cluster.&lt;/p&gt;

&lt;p&gt;The first step is to spin up a Cloud DataProc cluster using the &lt;code class=&quot;highlighter-rouge&quot;&gt;glcoud&lt;/code&gt; command line:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud dataproc clusters create cluster-taxidata-extractor &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--region&lt;/span&gt; us-central1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; default &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--zone&lt;/span&gt; us-central1-a &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--master-machine-type&lt;/span&gt; n1-standard-4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--master-boot-disk-size&lt;/span&gt; 500 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--num-workers&lt;/span&gt; 2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--worker-machine-type&lt;/span&gt; n1-standard-4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--worker-boot-disk-size&lt;/span&gt; 500 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--image-version&lt;/span&gt; 1.3-deb9 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJET_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command will spin up 3 node cluster each having 4 vCPUs and 15GBs of memory providing YARN with 8 cores and 24GBs of memory. This seems like more than enough horsepower for the task.  Once the cluster is operational, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; in with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud compute ssh ${HOSTNAME} --project=${PROJECT_ID} --zone=${ZONE} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once in, need to spin up Spark Shell, but with one caveat, namely adding the &lt;a href=&quot;https://github.com/GoogleCloudPlatform/spark-bigquery-connector&quot;&gt;spark-bigquery-connector&lt;/a&gt; to its environment.  This is necessary in order to leverage the latest and greatest Big Query Storage APIs.  The final command is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spark-shell &lt;span class=&quot;nt&quot;&gt;--jars&lt;/span&gt; gs://spark-lib/bigquery/spark-bigquery-latest.jar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once in, it is easy to start exploring the data to figure out the best way to partition data.  After a bit of review, I decided the most logical way to partition it is by ride date.  There are two fields that can be used to achieve this, either &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_datetime&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;dropoff_datetime&lt;/code&gt;. I decided to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup_datetime&lt;/code&gt; taking into account that some rides may start one day and end another day, I.e, 11.45p to 12.30a, these rides will be counted on the day they originated.  There is one wrinkle in this decision, namely, the spark-bigquery-connector doesn’t have a native type to cast BigQuery’s &lt;code class=&quot;highlighter-rouge&quot;&gt;DATETIME&lt;/code&gt; into so it simply casts it in to a &lt;code class=&quot;highlighter-rouge&quot;&gt;STRING&lt;/code&gt;, which is not very useful as a partition key.  Thus, custom code is needed to perform the cast from a &lt;code class=&quot;highlighter-rouge&quot;&gt;DATETIME&lt;/code&gt; in to a &lt;code class=&quot;highlighter-rouge&quot;&gt;DATE&lt;/code&gt;.  The final code looks something like:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bigquery&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bigquery-public-data:new_york_taxi_trips.tlc_yellow_trips_2018&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;withColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trip_date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pickup_datetime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;partitionBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trip_date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parquet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gs://${PROJET_ID}/new-york-taxi-trips/yellow/2018&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code is pretty self explanatory. With that being said, let’s quickly walk through it.  First, we load the table from BigQuery in to a DataFrame, next is the cast mentioned above, followed by partitioning information and file format, finally saving it.  After hitting return, I went to grab a coffee. By the time I got back to my desk, I had 18GB of Taxi ride data partitioned by &lt;code class=&quot;highlighter-rouge&quot;&gt;trip_date&lt;/code&gt; in my GCS bucket already. That was easy :smile:&lt;/p&gt;

&lt;p&gt;For reference the files should look something like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ gsutil &lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJET_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/_SUCCESS
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-01/
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-01/UUID.snappy.parquet
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-01/UUID.snappy.parquet
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-02/
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-02/UUID.snappy.parquet
gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01-02/UUID.snappy.parquet
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Pro Tip: This would be a great time to &lt;strong&gt;shut down&lt;/strong&gt; the DataProc cluster since it is no longer needed.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-an-external-table-in-bigquery&quot;&gt;Create an External Table in BigQuery&lt;/h3&gt;

&lt;p&gt;Now that we have a sample Hive Partitioned dataset in GCS to work with, let’s set it up as an external table in BigQuery.  To get started, an external table definition needs to be created.  Here is the command to create it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bq mkdef &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--source_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PARQUET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--hive_partitioning_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;AUTO &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--hive_partitioning_source_uri_prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gs://&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;PROJECT_ID&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gs://new-york-taxi-trips/yellow/2018/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.parquet &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; taxi-table-def
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;taxi-table-def&lt;/code&gt; should look something like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hivePartitioningOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AUTO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceUriPrefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gs://{PROJET_ID}/new-york-taxi-trips/yellow/2018/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceFormat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PARQUET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceUris&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gs://{PROJET_ID}/new-york-taxi-trips/yellow/2018/*.parquet&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the definition file in hand, the next step is to create the external table in BigQuery.  This can be accomplished with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bq mk &lt;span class=&quot;nt&quot;&gt;--external_table_definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;taxi-table-def &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJET_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:nyc_taxi.2018_external
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: This assumes you already have a Dataset named &lt;code class=&quot;highlighter-rouge&quot;&gt;nyc_taxi&lt;/code&gt;, if you don’t, now would be a great time to create it, or change the above command to match the name of the Dataset you want to add the external table reference to.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After running the above, you should get a message saying &lt;code class=&quot;highlighter-rouge&quot;&gt;Table '${PROJECT_ID}:nyc_taxi.2018_external' successfully created.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the table was successfully created, it should also appear in the BigQuery UI as an external table available to query.&lt;/p&gt;

&lt;h3 id=&quot;query-a-bigquery-external-table&quot;&gt;Query a BigQuery External Table&lt;/h3&gt;

&lt;p&gt;The final (and easiest) step is to query the Hive Partitioned Parquet files which requires nothing special at all.  The query semantics for an external table are exactly the same as querying a normal table.&lt;/p&gt;

&lt;p&gt;Let’s run a few queries to validate that things are working as they should.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_external&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query complete (13.9 sec elapsed, 20.9 GB processed)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Result: 112234626 &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2018`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query complete (0.6 sec elapsed, 0 B processed)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Result: 112234626&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks great!  There are the same number of records in the external sink table as the original source table. The only difference between the two queries is the run time and the bytes processed, which is to be expected being that one is querying external Parquet files.&lt;/p&gt;

&lt;p&gt;Now, lets see if BigQuery is able to decrease the amount of bytes processed if only querying a specific set of partitions, in this case the month of January:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_external&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trip_date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;2018-01-01&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;2018-01-31&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query complete (9.1 sec elapsed, 1.6 GB processed)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 8760090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, looks great!  Clearly, BigQuery was able to filter the bytes scanned dramatically (1.6 GB vs 20.9 GB).  In fact if we look at the Execution Details:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/querying-externally-partitioned-data-with-bq_1.png&quot; alt=&quot;BigQuery Execution Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can see that the query started with the full &lt;code class=&quot;highlighter-rouge&quot;&gt;8,760,090&lt;/code&gt; rows, and narrowed down to &lt;code class=&quot;highlighter-rouge&quot;&gt;217&lt;/code&gt;. This number is not random, it maps directly to the number of files that exist in GCS.  Lets verify:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ gsutil &lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;gs://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJET_ID&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/new-york-taxi-trips/yellow/2018/trip_date&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2018-01&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;parquet | &lt;span class=&quot;nb&quot;&gt;wc
     &lt;/span&gt;217     217   27342
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perfect, the number of Parquet files under January &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-01-*&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;217&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One final thing to verify is if the number of bytes decrease based upon columns specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;, which would prove that BigQuery is not only taking advantage of the Hive Based Partitions, but also the columnar Parquet format.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickup_datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_external&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Query complete (16.0 sec elapsed, 2.2 GB processed)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, as expected, the number of bytes processed was narrowed down (2.2 GB vs 20.9 GB).&lt;/p&gt;

&lt;p&gt;Another great feature of an external table is that you can join it with any other table, external or not, thus it makes querying external Parquet files seamless.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_trips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickup_location_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nyc_taxi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_external&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`bigquery-public-data.new_york_taxi_trips`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taxi_zone_geom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickup_location_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickup_location_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone_name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;total_trips&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This query aggregates the number of pickups by &lt;code class=&quot;highlighter-rouge&quot;&gt;zone_id&lt;/code&gt; and then joins the id with the public Dataset table &lt;code class=&quot;highlighter-rouge&quot;&gt;taxi_zone_geom&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Row&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;total_trips&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;pickup_location_id&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;zone_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4629205&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;237&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Upper East Side South&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4317981&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;161&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Midtown Center&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4203814&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;236&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Upper East Side North&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3944764&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;162&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Midtown East&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3821688&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;230&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Times Sq/Theatre District&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The most pickups in 2018 were in the &lt;em&gt;Upper East Side South&lt;/em&gt;, who would have known? :man_shrugging:&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Querying Hive Partitioned Parquet files directly from BigQuery is a very exciting and impressive new feature.  The thing that I especially like about it is the fact that you can transparently query across external and regular tables without fuss.  The number of use cases that come to mind are tremendous. I can’t wait to see how folks use it in their day to day data operations.&lt;/p&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="GCP" /><category term="BigQuery" /><category term="Spark" /><category term="BigData" /><summary type="html">In this post I will walk through how to use BigQuery's new capability of querying Hive Partitioned Parquet files in GCS. It is a really cool feature.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/taxi.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/taxi.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Power of Big Query with Public Data</title><link href="https://stevenlevine.dev/2018/02/the-power-of-bq/" rel="alternate" type="text/html" title="The Power of Big Query with Public Data" /><published>2018-02-04T17:03:00+00:00</published><updated>2018-02-04T17:03:00+00:00</updated><id>https://stevenlevine.dev/2018/02/the-power-of-bq</id><content type="html" xml:base="https://stevenlevine.dev/2018/02/the-power-of-bq/">&lt;blockquote&gt;
  &lt;p&gt;TLDR - If you are looking for an easy way to query a public dataset, you should definitely check out Big Query’s publicly available datasets, and chances are you will find the dataset you are looking for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;Late one Sunday afternoon, I found myself browsing around a few high profile JVM projects on GitHub and noticed that they all used different build tools.  The build tools were spread across Gradle, Maven, and SBT.  After seeing this, started wondering what the actual distribution was for the different build tools on GitHub.  Clearly, won’t be able to click my way through enough repos to get a clear representation, so I had to figure out a way to find some hard numbers to answer my question.&lt;/p&gt;

&lt;h3 id=&quot;first-attempt&quot;&gt;First Attempt&lt;/h3&gt;

&lt;p&gt;The first place where I tried to answer this simple question was to use the &lt;a href=&quot;https://github.com/search?q=pom.xml&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&quot;&gt;Github search box&lt;/a&gt;.  After trying different combinations and even within the advanced search, found it really difficult to get the results because of too much noise.  The main problem was that when searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; the place it showed up most often was in &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; which was not really relevant to my question.  This itself seemed a bit strange to me, as why would projects not want to version control their build artifacts?  Is the  &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; being generated as part of the build itself?  Will leave these interesting questions for another afternoon.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;Soon after this, I remembered that &lt;a href=&quot;https://cloud.google.com/bigquery/&quot;&gt;Big Query&lt;/a&gt; has &lt;a href=&quot;https://cloud.google.com/bigquery/public-data/&quot;&gt;public datasets&lt;/a&gt; available for all to use &lt;em&gt;(for free)&lt;/em&gt;, and decided to take a quick peek to see if the &lt;a href=&quot;https://cloud.google.com/bigquery/public-data/github&quot;&gt;GitHub dataset&lt;/a&gt; was there, and sure enough, it was. Great.  After some exploring around the &lt;code class=&quot;highlighter-rouge&quot;&gt;github_repos&lt;/code&gt; dataset, was able to find a table called &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; which looked very promising because it should have one row per file in GitHub right?  This should allow me to write a query that looked for the specific build files located within a project and then do a simple count.  After a quick browse around the tables, was able to find the &lt;em&gt;files&lt;/em&gt; table and it had the following shape:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;repo_name&lt;/td&gt;
      &lt;td&gt;STRING&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ref&lt;/td&gt;
      &lt;td&gt;STRING&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;path&lt;/td&gt;
      &lt;td&gt;STRING&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mode&lt;/td&gt;
      &lt;td&gt;INTEGER&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id&lt;/td&gt;
      &lt;td&gt;STRING&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;symlink_target&lt;/td&gt;
      &lt;td&gt;STRING&lt;/td&gt;
      &lt;td&gt;NULLABLE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After some simple data exploration was able to get a good idea of the meaning of the data with the following query:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github_repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build.sbt'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yielding:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Row&lt;/th&gt;
      &lt;th&gt;repo_name&lt;/th&gt;
      &lt;th&gt;ref&lt;/th&gt;
      &lt;th&gt;path&lt;/th&gt;
      &lt;th&gt;mode&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;symlink_target&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Knewton/kafka-manager&lt;/td&gt;
      &lt;td&gt;refs/heads/master&lt;/td&gt;
      &lt;td&gt;build.sbt&lt;/td&gt;
      &lt;td&gt;33188&lt;/td&gt;
      &lt;td&gt;934503…&lt;/td&gt;
      &lt;td&gt;null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Radsaggi/zipkin&lt;/td&gt;
      &lt;td&gt;refs/heads/master&lt;/td&gt;
      &lt;td&gt;build.sbt&lt;/td&gt;
      &lt;td&gt;33188&lt;/td&gt;
      &lt;td&gt;634bab3…&lt;/td&gt;
      &lt;td&gt;null&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Clearly this looks like the right table to use to answer my question about counting the different build tool usages.&lt;/p&gt;

&lt;p&gt;The next step was to come up with a query that can count the instances of each build artifact, meaning, count the number of  &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; across the Github dataset.  The results should give a good indication of how many projects use each build tool.&lt;/p&gt;

&lt;p&gt;Here is that query:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github_repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build.sbt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sbt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github_repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pom.xml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bigquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github_repos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build.gradle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which yielded the following results:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Row&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;sbt_cnt&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;gradle_cnt&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;maven_cnt&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;15,628&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;91,528&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;116,535&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There you have it, based on the data in this dataset, Maven out numbers SBT and Gradle. &lt;sup&gt;&lt;a href=&quot;#dataFootnote1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;  If I was going to take this experiment to the next level, I would take this data and join it with the repository’s most prevalent language, meaning, Java, Scala, etc.. to be able to say which build tool is most often used for which language.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The great thing about using Big Query with public datasets is the fact that there is no ETL required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are looking for an easy way to query a public dataset, you should definitely check out Big Query’s publicly available datasets, and chances are you will find the dataset you are looking for.  The great thing about using Big Query with public datasets is the fact that there is no ETL required. The only&lt;sup&gt;&lt;a href=&quot;#dataFootnote2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; thing required to run a query against a public dataset is to head to the &lt;a href=&quot;https://bigquery.cloud.google.com&quot;&gt;Big Query Console&lt;/a&gt;, pick a dataset, type in the query, and within seconds you will have results to review.&lt;/p&gt;

&lt;p&gt;What are you waiting for?&lt;/p&gt;

&lt;h5 id=&quot;notes&quot;&gt;Notes&lt;/h5&gt;

&lt;p&gt;&lt;a name=&quot;dataFootnote1&quot;&gt;1&lt;/a&gt;&lt;em&gt;: According to the meta data on the files table, it hasn’t been touched since Nov 2, 2017 so this data is a bit old.  Also keep in mind, that was is a very un-scientific way of figuring out build tool usage, thus take these numbers for what they are, a fun weekend experiment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;dataFootnote2&quot;&gt;2&lt;/a&gt;&lt;em&gt;: Signing up for a Free GCP account is required to gain access to the Big Query Console, although a Credit Card is not required to run queries.  However, there is a relatively low quota in place if you do not provide a credit card.&lt;/em&gt;&lt;/p&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="GCP" /><category term="BigQuery" /><category term="BigData" /><summary type="html">If you are looking for an easy way to query a public dataset you should definitely check out Big Query's publicly available datasets.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/github.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/github.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Notes from a Talk on Evolving Java</title><link href="https://stevenlevine.dev/2013/12/notes-from-a-talk-on-evolving-java/" rel="alternate" type="text/html" title="Notes from a Talk on Evolving Java" /><published>2013-12-02T22:03:00+00:00</published><updated>2013-12-02T22:03:00+00:00</updated><id>https://stevenlevine.dev/2013/12/notes-from-a-talk-on-evolving-java</id><content type="html" xml:base="https://stevenlevine.dev/2013/12/notes-from-a-talk-on-evolving-java/">&lt;p&gt;Recently I attended a talk given by &lt;a href=&quot;https://twitter.com/@briangoetz&quot;&gt;Brian Goetz&lt;/a&gt;, about evolving Java.  It was refreshing to hear that Java is moving forward again from the Java Language architect himself.  Like others, I have mixed feeling about how some of the features were added to the language, but overall, after hearing Brian’s talk, Java is getting the attention it needs to “keep up”.&lt;/p&gt;

&lt;p&gt;Below you can read some of the main points from the talk.  Brian’s deck can be found &lt;a href=&quot;https://dl.dropboxusercontent.com/u/1550608/evolving-java.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Full disclaimer, this post is me taking notes while trying to follow along with what Brian was saying.  There might be a few errors.  Please let me know if you find one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This really doesn’t do Brian’s presentation justice, but hope you find it informative about what’s coming in Java 8.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I am working on a follow up post with actual running Java 8 code to demonstrate most
of the features mentioned here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-night-with-brian-goetz---ny-java-meetup-dec-3-2013&quot;&gt;A night with Brian Goetz - NY JAVA Meetup, Dec 3, 2013&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java 8 - A new beginning&lt;/li&gt;
  &lt;li&gt;Trying to get Java moving again&lt;/li&gt;
  &lt;li&gt;Get things moving forward without breaking backwards compatibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Modernizing Java&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Language
    &lt;ul&gt;
      &lt;li&gt;Lambda Expressions (closures)&lt;/li&gt;
      &lt;li&gt;Interfaces (default methods)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Libraries
    &lt;ul&gt;
      &lt;li&gt;Bulk data on collections&lt;/li&gt;
      &lt;li&gt;Parallelism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Argument list, a return type, and a body
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Object o) -&amp;gt; o.toString&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Can refer to enclosing values
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Person p) -&amp;gt; p.getName().equals(name)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Method references to an existing method
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object::toString()&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Allows you to treat code as data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In 1995 most main stream languages did not support closures&lt;/li&gt;
  &lt;li&gt;Today, Java is the last holdout
    &lt;ul&gt;
      &lt;li&gt;C++ added them recently&lt;/li&gt;
      &lt;li&gt;C# added them in 3.0&lt;/li&gt;
      &lt;li&gt;All new languages have them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Long road&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1997 Ordersky - Pizza&lt;/li&gt;
  &lt;li&gt;2006 - 2008 a vigorous debate, BGGA, and CICE&lt;/li&gt;
  &lt;li&gt;Little language evolution from Java SE 5 (2004)&lt;/li&gt;
  &lt;li&gt;Project coin (small language changes) in Java SE 7&lt;/li&gt;
  &lt;li&gt;Dec 2009 OpenJDK Lambda formed&lt;/li&gt;
  &lt;li&gt;Nov 2010 - JSR-335&lt;/li&gt;
  &lt;li&gt;Current Status
    &lt;ul&gt;
      &lt;li&gt;Lambda’s, Interface, Bulk Ops&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Evolving a mature language&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Those encouraging change
    &lt;ul&gt;
      &lt;li&gt;Adapting to changing
        &lt;ul&gt;
          &lt;li&gt;hardware, attitudes, fashions, problems&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Those discouraging change
    &lt;ul&gt;
      &lt;li&gt;Maintain compatibility
        &lt;ul&gt;
          &lt;li&gt;Low tolerance for change that will break anything&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Preserving the core
        &lt;ul&gt;
          &lt;li&gt;Cant alienate user base&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Adapting to change
    &lt;ul&gt;
      &lt;li&gt;In 1995 everything was sequential, with imposed order&lt;/li&gt;
      &lt;li&gt;Very deterministic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We want to introduce things that are more parallel&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;We had the wrong defaults at the start, namely mutability&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Hard to undo this default behavior technically as well as in people’s mindsets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typical Iteration Example (External Iteration)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Foreach loop hides complex interactions&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External iteration&lt;/strong&gt; - client has to drive thus &lt;strong&gt;the what and how are intermingled&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Inversion of Control&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allows libraries to be much more expressive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda Example (Internal Iteration)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Internal iteration&lt;/strong&gt; - client in charge of the what, library in charge of how&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Functional Interfaces&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Supplier&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Predicate&amp;lt;String&amp;gt; isEmpty = s -&amp;gt; s.isEmpty()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable r = () -&amp;gt; {println(&quot;hello&quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We could have added function types, but it was obvious and WRONG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Would have interacted badly with erasure, introducing complexity and corner cases, would have a notion of old, and new libraries&lt;/li&gt;
  &lt;li&gt;Better to preserve the Core&lt;/li&gt;
  &lt;li&gt;Bonus - existing library are now forward compatible to lambdas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lambdas enable better APis&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable more powerful API’s&lt;/li&gt;
  &lt;li&gt;Client-Library boundary is more permeable&lt;/li&gt;
  &lt;li&gt;Safer, exposes, more opportunities for optimizations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example Higher Order Function&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iterface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparartor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Problem: Interface evolution&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you add a method to Interface, it will break all implementing libraries (obviously)&lt;/li&gt;
  &lt;li&gt;Source incompatible change, but binary will continue to work&lt;/li&gt;
  &lt;li&gt;Libraries will start looking old&lt;/li&gt;
  &lt;li&gt;Need a way to evolve them or replace them&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Collections.sort()&lt;/code&gt; &lt;em&gt;“bags nailed to side, don’t want to continue this”&lt;/em&gt; –BG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interface with Default Method&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Can override it, like a virtual method&lt;/li&gt;
  &lt;li&gt;Consumer doesn’t know if they are using default or another implementation found in superclass chain&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;A question was posed asking why is the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; keyword necessary?  Can’t the
compiler infer if there is an implementation in the IF, it is the default?
“Of course it can figure it out… but we wanted extra clarity, deal with it. :) “ –BG&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Some might say: “We now have multiple inheritance in Java???”&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java always had multiple inheritance of &lt;strong&gt;Types&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;This adds multiple inheritance of &lt;strong&gt;Behavior&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;But not of state&lt;/li&gt;
      &lt;li&gt;Java interface are stateless (like Fortress’s Traits)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resolution Rule 1&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If class can inherit a method from superclass and a superInterface, prefer the superclass
    &lt;ul&gt;
      &lt;li&gt;Defaults only considered if no method declared in superclass chain&lt;/li&gt;
      &lt;li&gt;True for both concrete and abstract superclass&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ensure compatibility with previous versions of Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resolution Rule 2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If class can inherit a method from two interfaces, and one more specific than (a subtype of) the other, prefer the more specific
    &lt;ul&gt;
      &lt;li&gt;An implementation in List would take precedence over once in Collection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The shape of the inheritance tree doesn’t matter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resolution Rule 3&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is no rule 3!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Class inheriting behavior from two SuperInterfaces&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;If you inherit two superInterface implementations, you (as developer) need to disambiguate which implementation to call&lt;/li&gt;
  &lt;li&gt;The onus is on the developer to decide, not the compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another SuperInterface Example&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// gets impl from A&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;How Lambda’s can help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typical Compartor Example&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byLastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Comparartor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We want code to look exactly at the problem statement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comparing with Lambda’s&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Option 1, use simple Lambda&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Option 2, use Class method&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// We can also &quot;reverse&quot; the Collection&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or add an additional compare to the pipeline&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenComparing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Person:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Important thing to be able to look at code and KNOW what it does!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example from Above&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Lets say we want to massage the results of the above collection&lt;/li&gt;
  &lt;li&gt;Another new feature added to Collections is &lt;code class=&quot;highlighter-rouge&quot;&gt;Streams&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Manipulate all elements of a Collection after applying a Filter&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filter and Collect&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blueBlcoks&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filter, Transform, and then Collect&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blueBlcoks&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Shape:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContainingBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filter, Map, and then Aggregate&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumOfWeights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Shape:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Believe it (or not), these examples are not any more expensive (perhaps cheaper) than a typical &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop&lt;/li&gt;
  &lt;li&gt;This is possible because it does a single pass on data
    &lt;ul&gt;
      &lt;li&gt;Creates a pipeline with Filter, then Map, and then Sum invokes them&lt;/li&gt;
      &lt;li&gt;In other words, Filter and Map are lazy operations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Imperative vs Streams&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Individual data vs Sets&lt;/li&gt;
  &lt;li&gt;Focused on How, vs What&lt;/li&gt;
  &lt;li&gt;Doesn’t read like problem statement vs Code reads like problem statement&lt;/li&gt;
  &lt;li&gt;Steps mashed together vs Well factored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Parallelism&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goal: Easy to use parallel libraries for Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parallelizing the getWeight operation is easy&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumOfWeights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Shape:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: So why Lambda’s?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Its about time! &lt;em&gt;“All the cool kids are doing it”&lt;/em&gt; – BG&lt;/li&gt;
  &lt;li&gt;Provide libraries a path to multi-core (needed internal iteration)&lt;/li&gt;
  &lt;li&gt;Empower library developers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q/A&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Features left out, whats coming next?
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Value Types&lt;/strong&gt; - A long or a decimal (or other Type), that won’t need to be accessed via a pointer, instead directly from a register&lt;/li&gt;
      &lt;li&gt;Useful for static data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="Development" /><category term="Functional" /><category term="Java" /><category term="Scala" /><summary type="html">Notes from Brian Goetz's talk on Evolving Java.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/running.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/running.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">On Deciding Between PUT and POST When Creating a RESTful Resource</title><link href="https://stevenlevine.dev/2013/10/on-deciding-between-put-and-post-when-creating-a-restful-resource/" rel="alternate" type="text/html" title="On Deciding Between PUT and POST When Creating a RESTful Resource" /><published>2013-10-29T21:15:00+00:00</published><updated>2013-10-29T21:15:00+00:00</updated><id>https://stevenlevine.dev/2013/10/on-deciding-between-put-and-post-when-creating-a-restful-resource</id><content type="html" xml:base="https://stevenlevine.dev/2013/10/on-deciding-between-put-and-post-when-creating-a-restful-resource/">&lt;p&gt;The goal of this post is to try to help you figure out which HTTP verb: &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; is more appropriate to use when adding and updating resources.&lt;/p&gt;

&lt;p&gt;Before we can get in to the details of which HTTP verb to use when, we first need to understand the type of “back end” or “server” or “service” we are trying to add the RESTful API to.  For the purposes of this post, we will refer to the service providing the API as the &lt;em&gt;“Resource Archetype”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To start, we need to distinguish the differences between the two basic types of resource archetypes, namely, a &lt;em&gt;collection&lt;/em&gt; and a &lt;em&gt;datastore&lt;/em&gt; or “store” for short.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;collection&lt;/strong&gt; is a &lt;strong&gt;server-managed&lt;/strong&gt; directory of resources.  This means that clients may &lt;strong&gt;propose&lt;/strong&gt; the addition of a new resource, but it is up to the discretion of the server whether or not to add or update the requested resource.  If the server decides to add the resource, it will reply to the client with an &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; that is associated with the newly created resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the purposes of this conversation, we are not going to get in to the details of how the server provides the ID to the client, it is out of the scope of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;store&lt;/strong&gt; is a &lt;strong&gt;client-managed&lt;/strong&gt; resource repository. This means the client can Create Read Update and Delete resources on its own terms without any interference from the server.  When interacting with a store, the &lt;strong&gt;client&lt;/strong&gt;  is responsible for assigning an &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; to the resource and managing the workflow around that task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These terms feel too abstract, lets walk through two concrete examples to fully illustrate the two concepts.&lt;/p&gt;

&lt;p&gt;Firstly, lets discuss a collection.  The simplest form of a collection is a middleware stack on top of a physical datastore.  For our example, the physical datastore is a NoSQL database, lets say &lt;a href=&quot;http://basho.com/riak/&quot;&gt;Riak&lt;/a&gt;.  Sitting on top of Riak is &lt;a href=&quot;http://spray.io/&quot;&gt;Spray&lt;/a&gt; and &lt;a href=&quot;http://akka.io/&quot;&gt;Akka&lt;/a&gt;, which provide a RESTful middleware stack.  For the purposes of this example, all you need to know about Spray and Akka is that Spray provides an API to accept RESTful requests and reply to them, and Akka provides an abstraction around the physical transport between Spray and the actual socket.  &lt;strong&gt;The main point of all this is that Spray is acting as the middleware/business logic, and it will be handling the request and determining if Riak will be updated&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Try not to get bogged down understanding these technologies if you are not familiar with them, try instead to substitute a framework/database that you are familiar with, as it doesn’t change the context of this example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now lets set up our example store, which ends up being a lot simpler than the collection, mainly because there is no middleware between the physical datastore and the client.  So following the example of the collection, the store would simply be a &lt;a href=&quot;http://basho.com/riak/&quot;&gt;Riak&lt;/a&gt; instance.&lt;/p&gt;

&lt;p&gt;Now that we have a clear understanding of the difference between a collection and store, we can now discuss the details of when to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; vs a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; when creating or updating a resource.&lt;/p&gt;

&lt;p&gt;When interacting with a &lt;strong&gt;store&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; must be used to add a new resource, with the ID specified by the &lt;strong&gt;client&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; must also be used to &lt;strong&gt;update&lt;/strong&gt; or replace an already stored resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason you &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; to add a new resource to a store is because the client has full control over the details of the resource.  The store is acting on behalf of the client.  On its own, the store has no notion of what the data means.  Thus it makes sense that the client has the ability to put things in the store, and then to update them, the client simply puts the resource again. &lt;em&gt;This is another way of saying the request is idempotent.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When interacting with a &lt;strong&gt;collection&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; must be used to create a new resource, and the collection provides the ID to the client.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; must be used to &lt;strong&gt;update&lt;/strong&gt; or replace an already stored resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main difference here is that since the collection potentially has a middleware layer, and some sort of business logic, the server has the ability to determine if the request is valid or not, and therefore, it is possible that the client can &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; (request) the creation of the new resource, and not get back an &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;, meaning the request failed.  Another thing to take notice of is the fact that no &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; gets passed from the client, because it is assumed that the server is handling this logic.&lt;/p&gt;

&lt;p&gt;If you take a step back to think about our above collection example, it is possible that Spray has many different clients, besides the RESTful one.  That is why it needs to manage the notion of identity.  Whereas, in the store example, if Riak is exposed to the client directly without a middleware, chances are, that Riak database is meant only for the RESTful client.&lt;/p&gt;

&lt;p&gt;Here is a additional example taken directly from the &lt;a href=&quot;http://docs.basho.com/riak/latest/dev/references/http/store-object/&quot;&gt;Riak documentation&lt;/a&gt; that also illustrates the point that when a client is providing an &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt;, the request should be a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, because the client is literally putting the resource in the store.  Riak also has the capabilities, to act as a middleware, and provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;ID&lt;/code&gt; to the client, and of course this request is a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /buckets/bucket/keys/key    # User-defined key
POST /buckets/bucket/keys       # Riak-defined key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As always, please feel free to comment on this post or email me with any comments, questions, or concerns.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><author><name></name></author><category term="Development" /><category term="REST" /><summary type="html">On Deciding Between PUT and POST When Creating a RESTful Resource</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/running.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/running.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">WebView(Javascript) -&amp;gt; Native Android API</title><link href="https://stevenlevine.dev/2012/03/webview-javascript-native-android/" rel="alternate" type="text/html" title="WebView(Javascript) -&gt; Native Android API" /><published>2012-03-03T15:35:00+00:00</published><updated>2012-03-03T15:35:00+00:00</updated><id>https://stevenlevine.dev/2012/03/webview-javascript-native-android</id><content type="html" xml:base="https://stevenlevine.dev/2012/03/webview-javascript-native-android/">&lt;p&gt;For a few weeks towards the end of last year I was developing an Android application.  During that time I discovered a few new (to me) things about the Android platform. One in particular that caught my attention was having Javascript code running locally on the device call a native Android function.&lt;/p&gt;

&lt;p&gt;Before getting into the technical details, let me first talk about a situation where this piece of functionality would be useful.  Lets say (for arguments sake), that you have to write an Android application that requires advanced and very polished charts.  What are you options?  You can try to find a native Android implementation that meets the requirement, but I must admit, I have been there and done that, and couldn’t find any particularly good libraries.  Yes there are some out there, but they didn’t have the polish I was looking for (please comment if you know of good ones).&lt;/p&gt;

&lt;p&gt;If there aren’t any good Android libraries available what can you do?  From personal experience I know there are a lot of good Javascript charting libraries out there.  How can this help when developing an Android application not a web application?  You can host the charting library on a server somewhere and reference them from an Android WebView?  From my experience, this solution is not optimal because of slow performance.  Even thought it was too slow, it still looked much better than any of the native libraries available.&lt;/p&gt;

&lt;p&gt;Is there way to get the Javascript code to run faster perhaps by taking advantage of the beefy hardware most Android devices run on?  Turns out it is quite easy to run the Javascript libraries directly on the device.  After moving the Javascript code from the server to the device the performance was greatly improved.  The charts rendered fast and were very responsive to the touch.&lt;/p&gt;

&lt;p&gt;Running Javascript on the device instead of the Server is fast, but it creates a different sort of problem, namely, now you have a view (Javascript Chart) running inside another view (WebView), how does the Javascript library get its data?  The obvious answer is to have the Javascript code call some (REST) service via HTTP.  For arguments sake, lets say, this would not work due to the fact that the data is only available via a proprietary Java wrapped protocol.  Is there a way for the Javascript code to make a Java call? There is and that is what the rest of this post is going to be about.&lt;/p&gt;

&lt;p&gt;For simplicity, I am going to abstract away the charts and data and replace them with a simple requirement, namely, have a WebView render the underlyingAndroid SDK version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For the purposes of this post, and because I like it, I am going to use Scala as the programming language.  As always, you can find all the code on &lt;a href=&quot;https://github.com/slevine/android-javascript-demo&quot;&gt;Github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal of this demo is to show how you can call Java from Javascript running in an Android WebView, thus we need to create a WebView, populate it with a simple html file and then enable Javascript.&lt;/p&gt;

&lt;p&gt;MainActivity.scala - setting up basic view&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// Step 1: Create WebView
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Step 2: Load page from assets
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:///android_asset/index.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Step 3: Enable Javascript
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;getSettings&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far, so easy.  Next, we need to create a simple Scala function in our &lt;code class=&quot;highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt; to expose for Javascript to call.  We said we wanted our view to expose the underlying Android sdk version, so lets create a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkVersion()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MainActivity.scala - function to expose SDK version&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;jsFun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;SDK&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we need to make this function available to Javascript by adding it to the DOM.&lt;/p&gt;

&lt;p&gt;MainActivity.scala - Adding a function to the DOM&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;// Add the above function to the DOM as &quot;Android&quot;
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// The function can now be invoked from Javascript with the following: Android.sdkVersion()
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addJavascriptInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsFun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Android&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Optional step:&lt;/em&gt; When developing Javascript applications it is sometimes helpfull to be able to debug something to the browser console.  Believe it or not, it is quite easy to implement the browser’s console implementation with an Android one, and instead of logging the message to the browser console, it will send them to the Android Logcat system.&lt;/p&gt;

&lt;p&gt;MainActivity.scala - Implement Javascript console.log&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// provide the WebView with a console.log implementation
&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setWebChromeClient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebChromeClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onConsoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consoleMessage&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConsoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consoleMessage&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;messageLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\t'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;consoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\t'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;consoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sourceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; (&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;consoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;lineNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;consoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;messageLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConsoleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MessageLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JavascriptExmple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JavascriptExmple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally we need to create our html/javascript view.&lt;/p&gt;

&lt;p&gt;Lets create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and place it under &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/assets&lt;/code&gt; and add at least the following code to it:&lt;/p&gt;

&lt;p&gt;index.html - default page that calls our Android.sdkVersion() function via Javascript&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Click &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; to invoke an Android function to
   find out the Android SDK version used to build this App.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sdk&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;SDK:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This message should appear as a debug message in Logcat.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.sdk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sdkVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see here, we are invoking the Android (Scala) method called &lt;code class=&quot;highlighter-rouge&quot;&gt;sdkVersion()&lt;/code&gt; and appending the results of the call to a div using JQuery.&lt;/p&gt;

&lt;p&gt;Thats all there is to it, now you know how to invoke an Android function from Javascript running in an Android WebView.&lt;/p&gt;</content><author><name></name></author><category term="Android" /><category term="Scala" /><category term="Javascript" /><category term="Development" /><summary type="html">Calling Javascript from an Android Webview</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://stevenlevine.dev/images/running.jpg" /><media:content medium="image" url="https://stevenlevine.dev/images/running.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mission Accomplished, Migration From Wordpress to Octopress Complete!</title><link href="https://stevenlevine.dev/2011/09/migration-from-wordpress-to-octopress-complete/" rel="alternate" type="text/html" title="Mission Accomplished, Migration From Wordpress to Octopress Complete!" /><published>2011-09-28T14:26:00+00:00</published><updated>2011-09-28T14:26:00+00:00</updated><id>https://stevenlevine.dev/2011/09/migration-from-wordpress-to-octopress-complete</id><content type="html" xml:base="https://stevenlevine.dev/2011/09/migration-from-wordpress-to-octopress-complete/">&lt;p&gt;Someone told me about the &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; blog engine last week, which is a blog engine based on &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;Jekyll&lt;/a&gt;, the engine that powers sites such as &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.  The main difference between Octopress and plain vanilla Jekyll is with Jekyll, you have to write your own Templates, Styles, and Javacscript code, but with Octopress, it has been abstracted away.  All you need to do is clone the Octopress repository and start writing posts (or migrating posts in my case).  With that being said, I have spend the past week migrating my blog from Wordpress to Octopress.&lt;/p&gt;

&lt;p&gt;Here are some of my initial thoughts, first on Wordpress:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Compared to when it first came out, Wordpress is now too heavy for a simple blog.  It has the functionality of a content management system, and that is why sites like TechCrunch use to manage their content.  They also have an army of authors creating content, vs one for my blog.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every time the admin site opens, it says that an Wordpress upgrade is available.  At first this was neat, a one click upgrade, but now, it is becoming a bit of a risk.  A lot of effort has gone in to the site, and if for some reason the upgrade process is not clean, it can break a lot of things.  Clearly, you should be backing up as you go along, but then it is no longer a one click upgrade.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The process of writing a post is very heavy.  First you need to log in to the Admin site, start writing the post in html markup.  If you want to include code in your post, there is not really a clean way to do this.  To preview your post you hit preview, but most of the time the code plugins do not behave correctly thus the only real way to preview is to publish the post.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An internet connection is required to do anything.  This is not 100% true, as you can always use a tool such as Mars Edit to write the post offline, but the preview never looks the same as it does when published on the real site.  It also doesn’t understand how to preview or author code samples.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now my thoughts on Octopress:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It is based on Ruby which is Cool!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No database required!  Again, since Octopress is nothing more than a Template Engine, the end product is static html that you can copy to any host and it will be live.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since Octopress is a template engine, not a blog engine, you have your entire blog including all your posts in a single project.  This works out great because you can open the project in RubyMine and see your posts as Markdown, your design as Sass and CSS, and your site layout as Liquid Templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The writing process is very Agile, as you can preview the site as many times as you want without having to copy/push/deploy code anywhere.  All that you need to do is &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; in to your blog’s project directory and type &lt;code class=&quot;highlighter-rouge&quot;&gt;rake preview&lt;/code&gt; and browse to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can write posts in Markdown, which happens to be my favorite way of generating web content (thanks to GitHub and Stackoverflow).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are a variety of great ways to embed code within a post.  The first great option is to use the neat GitHub notation by surrounding your code with three tick marks.  The second is to use the Liquid Template notation, which is equally nice.  Lets not forget that you can include a GitHub gist VERY easily, just &lt;code class=&quot;highlighter-rouge&quot;&gt;{ gist gistIdNumber }&lt;/code&gt;. Can’t get much easier than that!  Last but defiantly, not least is you can include a source file from the filesystem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code samples look fantastic when they are rendered in the Solarized themed code viewer! Hers’s a sample:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_tr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_tr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_tr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It has been about a week and my blog is completely migrated over to Octopress now.  It has been a rather enlightening experience for me because Octopress and Wordpress are so different.  Bottom line is Octopress was written by and targeted at hackers, and that fact inspires me at a level that Wordpress never was able to do.  I am hoping to leverage that hacker inspiration to get my self writing posts on a more regular basis starting today.&lt;/p&gt;</content><author><name></name></author><category term="Meta" /><category term="Development" /><summary type="html">My thoughts and experiences with migrating my blog from Wordpress to Octopress</summary></entry><entry><title type="html">In case you haven’t heard - Apple is not showing Java any more love…</title><link href="https://stevenlevine.dev/2010/10/in-case-you-havent-heard-apple-is-not-showing-java-any-more-love/" rel="alternate" type="text/html" title="In case you haven't heard - Apple is not showing Java any more love..." /><published>2010-10-21T16:29:24+00:00</published><updated>2010-10-21T16:29:24+00:00</updated><id>https://stevenlevine.dev/2010/10/in-case-you-havent-heard-apple-is-not-showing-java-any-more-love</id><content type="html" xml:base="https://stevenlevine.dev/2010/10/in-case-you-havent-heard-apple-is-not-showing-java-any-more-love/">&lt;p&gt;&lt;a href=&quot;http://goo.gl/mDkf&quot;&gt;Official release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you think about it it makes perfect sense for them. To them Java is no different than Flash, just a GUI platform. How many killer Java applications are there out there (besides Java IDE’s) ? Add to the fact that SunOracle is probably twisting their arm for more licensing money.&lt;/p&gt;

&lt;p&gt;Thus, it makes perfect sense for them, why would they want to waste their resources implementing a JVM that is required by only a few applications especially when they are trying to boot strap their “App Store”? Supporting Java developers working on server software is not part of their business model.&lt;/p&gt;

&lt;p&gt;But… This is &lt;strong&gt;not&lt;/strong&gt; bad for Java developers (although lots of Java developers are showing the Apple hate right now), because the Apple JVM was never up to date, and always behind the “real” JDK implementation. Remember the Eclipse 64 bit fiasco?&lt;/p&gt;

&lt;p&gt;My hopes moving forward is that the community comes together to come up with a completely open source version of the JVM for BSD/Mac. There are already two really good starting points, &lt;a href=&quot;http://goo.gl/JMNB&quot;&gt;SoyLatte&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/8wkg&quot;&gt;OpenJDK&lt;/a&gt;. It would be great if Apple were to open source their JVM code base (although this is not likely due to SunOracle Licensing), can still hope.&lt;/p&gt;

&lt;p&gt;Bottom line, if you are a Java developer you do not have to start migrating away from OS X, everything will be fine – just give it a bit of time.&lt;/p&gt;

&lt;p&gt;Just my thoughts.&lt;/p&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="Development" /><category term="Java" /><category term="Mac" /><summary type="html">Official release notes.</summary></entry><entry><title type="html">First Thoughts On My New Eee Pc (1005PE)</title><link href="https://stevenlevine.dev/2010/03/first-thoughts-on-my-new-eee-pc-1005pe/" rel="alternate" type="text/html" title="First Thoughts On My New Eee Pc (1005PE)" /><published>2010-03-23T18:30:30+00:00</published><updated>2010-03-23T18:30:30+00:00</updated><id>https://stevenlevine.dev/2010/03/first-thoughts-on-my-new-eee-pc-1005pe</id><content type="html" xml:base="https://stevenlevine.dev/2010/03/first-thoughts-on-my-new-eee-pc-1005pe/">&lt;p&gt;So far, so good with my new Eee PC (1005PE) Netbook. The machine came pre-installed with Win 7 Starter edition, so the first task for me to do was to get rid of Windows 7 and install &lt;a href=&quot;http://www.ubuntu.com/GetUbuntu/download-netbook&quot;&gt;Ubuntu Netbook&lt;/a&gt; on it. So I downloaded the Ubuntu Netbook 10.04 &lt;a href=&quot;http://cdimage.ubuntu.com/ubuntu-netbook/daily-live/current/&quot;&gt;daily build&lt;/a&gt; image (yes, I am daring), and was on my way.&lt;/p&gt;

&lt;p&gt;At first, this task seemed easier said than done because I was running in to the most fundamental problem possible, namely, I could not get the Eee PC to boot from the ‘bootable’ usb stick I created on my Mac Pro desktop. I checked every single bios settings, made sure that USB was chosen as priority boot drive, Still nothing. Kept getting the Windows 7 startup sound which was starting to get a bit tedious.&lt;/p&gt;

&lt;p&gt;The next thing I thought was maybe the Cruser U3 software was causing the trouble so I went out and found a U3 uninstaller, and ran it. Still didn’t boot from the USB Stick. I then found out that in order to get the boot menu on the Eee PC, you need to hold down the Escape key while its booting. I tried that, it had the USB as a target bootable device, I selected it, but still went in to Windows 7.&lt;/p&gt;

&lt;p&gt;At this point I was quickly running out of ideas, the only other thing I can think of was perhaps the USB stick was some how not bootable? Maybe the USB stick was not created correctly even though I followed the Ubuntu Mac instructions step by step. I downloaded the Ubuntu 10.04 &lt;a href=&quot;http://cdimage.ubuntu.com/ubuntu-netbook/daily-live/current/&quot;&gt;daily build&lt;/a&gt; on to my Eee PC while booted in to Windows 7, and then downloaded this program called &lt;a href=&quot;http://unetbootin.sourceforge.net/&quot;&gt;UNetbootin&lt;/a&gt;. This time I used that program to create my bootable USB stick, and then I tried to reboot again.&lt;/p&gt;

&lt;p&gt;This time it booted in to the Live CD version of Ubuntu, yes, I was saved! I couldn’t believe that it was a bad image on my USB Stick. Why can’t a Mac create a bootable USB Stick? The strange thing is that the Eee couldn’t even read the files on the USB Stick when connected in Windows 7, but when the Stick was plugged in to my Mac Pro, I was able to see the files fine. And vise versa, once I created the USB Stick in Windows, I coulsn’t see the files on Mac. What is the deal here? I thought ISO images were platform independent?&lt;/p&gt;

&lt;p&gt;With that being said the USB Stick problem is well in the past for me. Look for my next post where I will give my impressions of Ubuntu Netbook 10.04.&lt;/p&gt;</content><author><name>Steven Levine</name><email>steve@blue64</email></author><category term="Howto" /><category term="Linux" /><category term="Ubuntu" /><summary type="html">So far, so good with my new Eee PC (1005PE) Netbook. The machine came pre-installed with Win 7 Starter edition, so the first task for me to do was to get rid of Windows 7 and install Ubuntu Netbook on it. So I downloaded the Ubuntu Netbook 10.04 daily build image (yes, I am daring), and was on my way.</summary></entry></feed>